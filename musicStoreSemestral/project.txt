public class AppShowcase {
    public static void main(String[] args) {
//        TODO demonstrate some java app functionalities with DB:

    }
}
package DAOLayer;


import jakarta.persistence.EntityManager;

import java.util.List;

public interface GenericDAOInterface<T, ID> {
    T findById(ID id);
    List<T> findAll();
    boolean save(T entity);
    boolean update(T entity);
    boolean delete(T entity);
    String getEntityClassName();
}
package DAOLayer;

import jakarta.persistence.EntityManager;

import java.util.List;

public class GenericDAO<T, ID> implements GenericDAOInterface<T, ID> {
    protected final Class<T> entityClass;
    protected final EntityManager entityManager;

    public GenericDAO(Class<T> entityClass, EntityManager entityManager) {
        this.entityClass = entityClass;
        this.entityManager = entityManager;
    }

    @Override
    public T findById(ID id) {
        return entityManager.find(entityClass, id);
    }

    @Override
    public List<T> findAll() {
        return entityManager.createQuery("FROM " + entityClass.getSimpleName(), entityClass).getResultList();
    }

    public boolean save(T entity) {
        boolean result;
        try {
            entityManager.getTransaction().begin();
            entityManager.persist(entity);
            entityManager.getTransaction().commit();
            result = true;
        } catch (Exception e) {
            entityManager.getTransaction().rollback();
            result = false;
        }

        return result;
    }

    public boolean update(T entity) {
        boolean result;
        try {
            entityManager.getTransaction().begin();
            entityManager.merge(entity);
            entityManager.getTransaction().commit();
            result = true;
        } catch (Exception e) {
            entityManager.getTransaction().rollback();
            result = false;
        }

        return result;
    }

    public boolean delete(T entity) {
        boolean result;
        try {
            entityManager.getTransaction().begin();
            entityManager.remove(entity);
            entityManager.getTransaction().commit();
            result = true;
        } catch (Exception e) {
            entityManager.getTransaction().rollback();
            result = false;
        }

        return result;
    }

    public Class<T> getEntityClass() {
        return entityClass;
    }

    public EntityManager getEntityManager() {
        return entityManager;
    }

    public String getEntityClassName() {
        return entityClass.getSimpleName();
    }
}
package DAOLayer.Product;

import DAOLayer.GenericDAO;
import Entities.Product.Accessory;
import jakarta.persistence.EntityManager;

import java.sql.CallableStatement;
import java.sql.Connection;

public class AccessoryDAO extends GenericDAO<Accessory, Integer> {

    public AccessoryDAO(Class<Accessory> entityClass, EntityManager entityManager) {
        super(entityClass, entityManager);
    }

    public boolean assignAccessoryToProduct(String accessoryISBN, String instrumentModelNumber) {
        boolean result;
        try (Connection connection = entityManager.unwrap(Connection.class);
             CallableStatement callableStatement = connection.prepareCall("{call assign_accessory_to_product(?, ?)}")) {
            callableStatement.setString(1, accessoryISBN);
            callableStatement.setString(2, instrumentModelNumber);
            callableStatement.execute();
            result = true;
        } catch (Exception e) {
            result = false;
            System.err.println("Failed to assign accessory:" + accessoryISBN +
                    " to product: " + instrumentModelNumber +
                    "
"  + e.getMessage());

        }

        return result;
    }
}
package DAOLayer.User;

import DAOLayer.GenericDAO;
import Entities.User.PrivateInfo;
import jakarta.persistence.EntityManager;

import java.sql.CallableStatement;
import java.sql.Connection;

public class PrivateInfoDAO extends GenericDAO<PrivateInfo, Integer> {
    public PrivateInfoDAO(EntityManager entityManager) {
        super(PrivateInfo.class, entityManager);
    }

    public boolean insertPrivateInfo(String userNickname,
                                     String userMail,
                                     String fullName,
                                     String homeNumber,
                                     String street,
                                     String city,
                                     String zip,
                                     String phoneNumber,
                                     String password){
        boolean result;
        try (Connection connection = entityManager.unwrap(Connection.class);
             CallableStatement callableStatement = connection.prepareCall("{call insertprivateinfo(?, ?, ?, ?, ?, ?, ?, ?, ?)}")) {
            callableStatement.setString(1, userNickname);
            callableStatement.setString(2, userMail);
            callableStatement.setString(3, fullName);
            callableStatement.setString(4, homeNumber);
            callableStatement.setString(5, street);
            callableStatement.setString(6, city);
            callableStatement.setString(7, zip);
            callableStatement.setString(8, phoneNumber);
            callableStatement.setString(9, password);
            callableStatement.execute();
            result = true;
        } catch (Exception e) {
            result = false;
            System.err.println("Failed to insert private info: " + e.getMessage());
        }

        return result;
    }
}
package DAOLayer.User;

import DAOLayer.GenericDAO;
import Entities.User.WorkerUser;
import jakarta.persistence.EntityManager;

import java.sql.CallableStatement;
import java.sql.Connection;

public class WorkerUserDAO extends GenericDAO<WorkerUser, Integer> {
    public WorkerUserDAO(EntityManager entityManager) {
        super(WorkerUser.class, entityManager);
    }

    public boolean insertWorkerUser(String personalIdentificationNumber,
                                    String userNickname,
                                    String userMail,
                                    String location) {
        boolean result;

        try (Connection connection = entityManager.unwrap(Connection.class);
             CallableStatement callableStatement = connection.prepareCall("{call insert_worker_user(?, ?, ?, ?)}")) {
            callableStatement.setString(1, personalIdentificationNumber);
            callableStatement.setString(2, userNickname);
            callableStatement.setString(3, userMail);
            callableStatement.setString(4, location);
            callableStatement.execute();
            result = true;
        } catch (Exception e) {
            result = false;
            System.err.println("Failed to insert worker user: " + e.getMessage());
        }

        return result;
    }
}
package Entities.Product;

import jakarta.persistence.*;

@Entity
@Table(name = "accessory")
public class Accessory {
    @Id
    @Column(name = "isbn", nullable = false, length = 50)
    private String isbn;

    @Column(name = "accessoryid", nullable = false)
    private Integer accessoryid;

    @Column(name = "type", length = 50)
    private String type;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "comeswith")
    private InstrumentProduct comeswith;

    public String getIsbn() {
        return isbn;
    }

    public void setIsbn(String isbn) {
        this.isbn = isbn;
    }

    public Integer getAccessoryid() {
        return accessoryid;
    }

    public void setAccessoryid(Integer accessoryid) {
        this.accessoryid = accessoryid;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public InstrumentProduct getComeswith() {
        return comeswith;
    }

    public void setComeswith(InstrumentProduct comeswith) {
        this.comeswith = comeswith;
    }

}
package Entities.Product;

import Entities.User.CustomerUser;

import jakarta.persistence.*;

@Entity
@Table(name = "buys")
public class Buy {
    @Id
    @Column(name = "purchaseid", nullable = false)
    private Integer id;

    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    private Product product;

    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    private CustomerUser customeruser;

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Product getProduct() {
        return product;
    }

    public void setProduct(Product product) {
        this.product = product;
    }

    public CustomerUser getCustomeruser() {
        return customeruser;
    }

    public void setCustomeruser(CustomerUser customeruser) {
        this.customeruser = customeruser;
    }

}
package Entities.Product;

import jakarta.persistence.*;

@Entity
@Table(name = "instrumentpickup")
public class Instrumentpickup {
    @Id
    @Column(name = "installedonid", nullable = false)
    private Integer id;

    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "instrumentid", nullable = false, referencedColumnName = "instrumentid")
    private InstrumentProduct instrumentid;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "pickupid", referencedColumnName = "pickupid")
    private Pickup pickupid;

    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "modelnumber", nullable = false)
    private InstrumentProduct modelnumber;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "pickupmodelnumber")
    private Pickup pickupmodelnumber;

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public InstrumentProduct getInstrumentid() {
        return instrumentid;
    }

    public void setInstrumentid(InstrumentProduct instrumentid) {
        this.instrumentid = instrumentid;
    }

    public Pickup getPickupid() {
        return pickupid;
    }

    public void setPickupid(Pickup pickupid) {
        this.pickupid = pickupid;
    }

    public InstrumentProduct getModelnumber() {
        return modelnumber;
    }

    public void setModelnumber(InstrumentProduct modelnumber) {
        this.modelnumber = modelnumber;
    }

    public Pickup getPickupmodelnumber() {
        return pickupmodelnumber;
    }

    public void setPickupmodelnumber(Pickup pickupmodelnumber) {
        this.pickupmodelnumber = pickupmodelnumber;
    }

}
package Entities.Product;

import jakarta.persistence.*;

@Entity
@Table(name = "instrumentproduct")
@AttributeOverrides({
        @AttributeOverride(name = "id.isbn", column = @Column(name = "isbn")),
        @AttributeOverride(name = "id.modelnumber", column = @Column(name = "modelnumber")),
})
public class InstrumentProduct extends Product {
    @Column(name = "instrumentid", nullable = false)
    private Integer instrumentid;

    @Column(name = "range", length = 50)
    private String range;

    @Column(name = "type", length = 50)
    private String type;

    // Getters and Setters
    public Integer getInstrumentid() {
        return instrumentid;
    }

    public void setInstrumentid(Integer instrumentid) {
        this.instrumentid = instrumentid;
    }

    public String getRange() {
        return range;
    }

    public void setRange(String range) {
        this.range = range;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }
}
package Entities.Product;

import jakarta.persistence.*;

@Entity
@Table(name = "pasystemproduct")
@AttributeOverrides({
        @AttributeOverride(name = "id.isbn", column = @Column(name = "isbn")),
        @AttributeOverride(name = "id.modelnumber", column = @Column(name = "modelnumber"))
})
public class PASystemProduct extends Product {
    @Column(name = "systemid", nullable = false)
    private Integer systemid;

    @Column(name = "range", length = 50)
    private String range;

    @Column(name = "type", length = 50)
    private String type;

    @Column(name = "resistance", length = 50)
    private String resistance;

    // Getters and Setters
    public Integer getSystemid() {
        return systemid;
    }

    public void setSystemid(Integer systemid) {
        this.systemid = systemid;
    }

    public String getRange() {
        return range;
    }

    public void setRange(String range) {
        this.range = range;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getResistance() {
        return resistance;
    }

    public void setResistance(String resistance) {
        this.resistance = resistance;
    }
}
package Entities.Product;

import jakarta.persistence.*;

@Entity
@Table(name = "pickup")
public class Pickup {
    @Id
    @Column(name = "modelnumber", nullable = false, length = 50)
    private String modelnumber;

    @Column(name = "pickupid", nullable = false)
    private Integer pickupid;

    @Column(name = "name", nullable = false, length = 50)
    private String name;

    public String getModelnumber() {
        return modelnumber;
    }

    public void setModelnumber(String modelnumber) {
        this.modelnumber = modelnumber;
    }

    public Integer getPickupid() {
        return pickupid;
    }

    public void setPickupid(Integer pickupid) {
        this.pickupid = pickupid;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

}
package Entities.Product;

import jakarta.persistence.*;

import java.io.Serial;
import java.io.Serializable;
import java.util.Objects;

@Embeddable
public class ProductId implements Serializable {
    @Serial
    private static final long serialVersionUID = -7065411362355070039L;
    @Column(name = "isbn", nullable = false, length = 50)
    private String isbn;

    @Column(name = "modelnumber", nullable = false, length = 50)
    private String modelnumber;

    public String getIsbn() {
        return isbn;
    }

    public void setIsbn(String isbn) {
        this.isbn = isbn;
    }

    public String getModelnumber() {
        return modelnumber;
    }

    public void setModelnumber(String modelnumber) {
        this.modelnumber = modelnumber;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        ProductId entity = (ProductId) o;
        return Objects.equals(this.modelnumber, entity.modelnumber) &&
                Objects.equals(this.isbn, entity.isbn);
    }

    @Override
    public int hashCode() {
        return Objects.hash(modelnumber, isbn);
    }

}
package Entities.Product;

import Entities.Store.Store;
import jakarta.persistence.*;

import java.util.HashSet;
import java.util.Set;

@Entity
@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)
public abstract class Product {
    @EmbeddedId
    private ProductId id;

    @Column(name = "productid", nullable = false)
    private Integer productid;

    @ManyToMany
    @JoinTable(
            name = "product_store",
            joinColumns = {@JoinColumn(name = "product_id")},
            inverseJoinColumns = {@JoinColumn(name = "store_id")}
    )
    private Set<Store> stores = new HashSet<>();

    public Set<Store> getStores() {
        return stores;
    }

    public void setStores(Set<Store> stores) {
        this.stores = stores;
    }

    // Getters and Setters
    public ProductId getId() {
        return id;
    }

    public void setId(ProductId id) {
        this.id = id;
    }

    public Integer getProductid() {
        return productid;
    }

    public void setProductid(Integer productid) {
        this.productid = productid;
    }
}
package Entities.Store;

import Entities.Product.Product;

import jakarta.persistence.*;
import java.util.HashSet;
import java.util.Set;

@Entity
@Table(name = "store")
public class Store {
    @Id
    @Column(name = "location", nullable = false, length = 50)
    private String location;

    @Column(name = "storeid", nullable = false)
    private Integer storeid;

    @ManyToMany(mappedBy = "stores")
    private Set<Product> products = new HashSet<>();

    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    public Integer getStoreid() {
        return storeid;
    }

    public void setStoreid(Integer storeid) {
        this.storeid = storeid;
    }

}
package Entities.User;

import jakarta.persistence.*;

@Entity
@Table(name = "customeruser")
@AttributeOverrides({
        @AttributeOverride(name = "id.nickname", column = @Column(name = "customer_nickname")),
        @AttributeOverride(name = "id.email", column = @Column(name = "customer_email"))
})
public class CustomerUser extends User {
    @Column(name = "customerid", nullable = false)
    private Integer customerid;

    @Column(name = "cookies")
    private Integer cookies;

    @Column(name = "premiumstatus")
    private Boolean premiumstatus;

    public Integer getCustomerid() {
        return customerid;
    }

    public void setCustomerid(Integer customerid) {
        this.customerid = customerid;
    }

    public Integer getCookies() {
        return cookies;
    }

    public void setCookies(Integer cookies) {
        this.cookies = cookies;
    }

    public Boolean getPremiumstatus() {
        return premiumstatus;
    }

    public void setPremiumstatus(Boolean premiumstatus) {
        this.premiumstatus = premiumstatus;
    }
}
package Entities.User;

import jakarta.persistence.*;

import java.io.Serial;
import java.io.Serializable;
import java.util.Objects;

@Embeddable
public class PrivateinfoId implements Serializable {
    @Serial
    private static final long serialVersionUID = 1820287446345463706L;
    @Column(name = "usernickname", nullable = false, length = 50)
    private String usernickname;

    @Column(name = "usermail", nullable = false, length = 50)
    private String usermail;

    @Column(name = "fullname", nullable = false, length = 50)
    private String fullname;

    @Column(name = "street", nullable = false, length = 50)
    private String street;

    @Column(name = "city", nullable = false, length = 50)
    private String city;

    @Column(name = "zip", nullable = false, length = 50)
    private String zip;

    @Column(name = "phonenumber", nullable = false, length = 12)
    private String phonenumber;

    public String getUsernickname() {
        return usernickname;
    }

    public void setUsernickname(String usernickname) {
        this.usernickname = usernickname;
    }

    public String getUsermail() {
        return usermail;
    }

    public void setUsermail(String usermail) {
        this.usermail = usermail;
    }

    public String getFullname() {
        return fullname;
    }

    public void setFullname(String fullname) {
        this.fullname = fullname;
    }

    public String getStreet() {
        return street;
    }

    public void setStreet(String street) {
        this.street = street;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getZip() {
        return zip;
    }

    public void setZip(String zip) {
        this.zip = zip;
    }

    public String getPhonenumber() {
        return phonenumber;
    }

    public void setPhonenumber(String phonenumber) {
        this.phonenumber = phonenumber;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        PrivateinfoId entity = (PrivateinfoId) o;
        return Objects.equals(this.zip, entity.zip) &&
                Objects.equals(this.city, entity.city) &&
                Objects.equals(this.street, entity.street) &&
                Objects.equals(this.phonenumber, entity.phonenumber) &&
                Objects.equals(this.usermail, entity.usermail) &&
                Objects.equals(this.fullname, entity.fullname) &&
                Objects.equals(this.usernickname, entity.usernickname);
    }

    @Override
    public int hashCode() {
        return Objects.hash(zip, city, street, phonenumber, usermail, fullname, usernickname);
    }

}
package Entities.User;

import jakarta.persistence.*;

@Entity
@Table(name = "privateinfo")
public class PrivateInfo {
    @EmbeddedId
    private PrivateinfoId id;

    @MapsId("id")
    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    private User users;

    @Column(name = "homenumber", length = 50)
    private String homenumber;

    @Column(name = "password", length = 50)
    private String password;

    public PrivateinfoId getId() {
        return id;
    }

    public void setId(PrivateinfoId id) {
        this.id = id;
    }

    public User getUsers() {
        return users;
    }

    public void setUsers(User users) {
        this.users = users;
    }

    public String getHomenumber() {
        return homenumber;
    }

    public void setHomenumber(String homenumber) {
        this.homenumber = homenumber;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

}
package Entities.User;

import jakarta.persistence.*;

@Entity
@Table(name = "superiority")
public class Superiority {
    @Id
    @Column(name = "superiorityid", nullable = false)
    private Integer id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "superiorid", referencedColumnName = "workerid")
    private WorkerUser superiorid;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "underlingid", referencedColumnName = "workerid")
    private WorkerUser underlingid;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "issuperior", referencedColumnName = "personalidentificationnumber")
    private WorkerUser issuperior;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "isunderling", referencedColumnName = "personalidentificationnumber")
    private WorkerUser isunderling;

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public WorkerUser getSuperiorid() {
        return superiorid;
    }

    public void setSuperiorid(WorkerUser superiorid) {
        this.superiorid = superiorid;
    }

    public WorkerUser getUnderlingid() {
        return underlingid;
    }

    public void setUnderlingid(WorkerUser underlingid) {
        this.underlingid = underlingid;
    }

    public WorkerUser getIssuperior() {
        return issuperior;
    }

    public void setIssuperior(WorkerUser issuperior) {
        this.issuperior = issuperior;
    }

    public WorkerUser getIsunderling() {
        return isunderling;
    }

    public void setIsunderling(WorkerUser isunderling) {
        this.isunderling = isunderling;
    }

}
package Entities.User;

import jakarta.persistence.*;
import java.io.Serial;
import java.io.Serializable;
import java.util.Objects;

@Embeddable
public class UserId implements Serializable {
    @Serial
    private static final long serialVersionUID = -263449651575510920L;

    @Column(name = "nickname", nullable = false, length = 50)
    private String nickname;

    @Column(name = "email", nullable = false, length = 50)
    private String email;

    public String getNickname() {
        return nickname;
    }

    public void setNickname(String nickname) {
        this.nickname = nickname;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        UserId entity = (UserId) o;
        return Objects.equals(this.nickname, entity.nickname) &&
                Objects.equals(this.email, entity.email);
    }

    @Override
    public int hashCode() {
        return Objects.hash(nickname, email);
    }
}
package Entities.User;

import jakarta.persistence.*;

@Entity
@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)
@Table(name = "users")
public class User {
    @EmbeddedId
    private UserId id;

    @Column(name = "userid", nullable = false)
    private Integer userid;

    public UserId getId() {
        return id;
    }

    public void setId(UserId id) {
        this.id = id;
    }

    public Integer getUserid() {
        return userid;
    }

    public void setUserid(Integer userid) {
        this.userid = userid;
    }

}
package Entities.User;

import Entities.Store.Store;

import jakarta.persistence.*;

@Entity
@Table(name = "workeruser")
@AttributeOverrides({
        @AttributeOverride(name = "id.nickname", column = @Column(name = "worker_nickname")),
        @AttributeOverride(name = "id.email", column = @Column(name = "useremail"))
})
public class WorkerUser extends User {
    @Column(name = "workerid", nullable = false)
    private Integer workerid;

    @Column(name = "personalidentificationnumber", nullable = false, length = 50)
    private String personalidentificationnumber;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "location")
    private Store location;

    public Integer getWorkerid() {
        return workerid;
    }

    public void setWorkerid(Integer workerid) {
        this.workerid = workerid;
    }

    public String getPersonalidentificationnumber() {
        return personalidentificationnumber;
    }

    public void setPersonalidentificationnumber(String personalidentificationnumber) {
        this.personalidentificationnumber = personalidentificationnumber;
    }

    public Store getStore() {
        return location;
    }

    public void setStore(Store location) {
        this.location = location;
    }
}
package ServiceLayer;

import java.util.Optional;

public interface GenericServiceInterface<T,ID> {
    Optional<T> findById(ID id);
    boolean save(T entity);
    boolean update(T entity);
    boolean delete(T entity);
}
package ServiceLayer;

import DAOLayer.GenericDAO;
import DAOLayer.GenericDAOInterface;

import java.util.Optional;

public class GenericService<T,ID> implements GenericServiceInterface<T,ID> {
    protected final GenericDAOInterface<T,ID> dao;

    public GenericService(GenericDAOInterface<T, ID> dao) {
        this.dao = dao;
    }

    @Override
    public Optional<T> findById(ID id) {
        Optional<T> entity = Optional.ofNullable(dao.findById(id));
        if (entity.isEmpty()){
            System.err.println("Entity not found with id: " + id
                    + "
in table: " + dao.getEntityClassName()
                    + "
(try checking all of the ids in the table)");
        }

        return entity;
    }

    @Override
    public boolean save(T entity) {
        boolean isActionSuccessful = dao.save(entity);
        if (!isActionSuccessful){
            System.err.println("Error saving entity: " + entity.toString());
        }
        return isActionSuccessful;
    }

    @Override
    public boolean update(T entity) {
        boolean isActionSuccessful = dao.update(entity);
        if (!isActionSuccessful){
            System.err.println("Error updating entity: " + entity.toString());
        }
        return isActionSuccessful;
    }

    @Override
    public boolean delete(T entity) {
        boolean isActionSuccessful = dao.delete(entity);
        if (!isActionSuccessful){
            System.err.println("Error deleting entity: " + entity.toString());
        }
        return isActionSuccessful;
    }

    public GenericDAOInterface<T,ID> getDAO() {
        return dao;
    }
}
package ServiceLayer.User;

import DAOLayer.GenericDAOInterface;
import DAOLayer.User.PrivateInfoDAO;
import Entities.User.PrivateInfo;
import ServiceLayer.GenericService;

public class PrivateInfoService extends GenericService<PrivateInfo, Integer> {
    PrivateInfoDAO privateInfoDAO = null;

    public PrivateInfoService(GenericDAOInterface<PrivateInfo, Integer> dao) {
        super(dao);
        if (!(dao instanceof PrivateInfoDAO))
            throw new IllegalArgumentException("PrivateInfoService should be constructed with a PrivateInfoDAO");
        else {
            this.privateInfoDAO = (PrivateInfoDAO) dao;
        }
    }

    public boolean insertPrivateInfo(PrivateInfo privateInfo) {
        return privateInfoDAO.insertPrivateInfo(
                privateInfo.getId().getUsernickname(),
                privateInfo.getId().getUsermail(),
                privateInfo.getId().getFullname(),
                privateInfo.getHomenumber(),
                privateInfo.getId().getStreet(),
                privateInfo.getId().getCity(),
                privateInfo.getId().getZip(),
                privateInfo.getId().getPhonenumber(),
                privateInfo.getPassword());
    }

    public boolean insertPrivateInfo(String userNickname,
                                     String userMail,
                                     String fullName,
                                     String homeNumber,
                                     String street,
                                     String city,
                                     String zip,
                                     String phoneNumber,
                                     String password) {
        return privateInfoDAO.insertPrivateInfo(userNickname, userMail, fullName, homeNumber, street, city, zip, phoneNumber, password);
    }


}
package ServiceLayer.User;

import DAOLayer.GenericDAO;
import DAOLayer.GenericDAOInterface;
import DAOLayer.User.WorkerUserDAO;
import Entities.User.WorkerUser;
import ServiceLayer.GenericService;

import java.util.List;

public class WorkerUserService extends GenericService<WorkerUser, Integer> {
    private WorkerUserDAO workerUserDAO = null;

    public WorkerUserService(GenericDAOInterface<WorkerUser, Integer> dao) {
        super(dao);
        if (!(dao instanceof WorkerUserDAO))
            throw new IllegalArgumentException("WorkerUserService should be constructed with a WorkerUserDAO");
        else {
            this.workerUserDAO = (WorkerUserDAO) dao;
        }
    }

    public void setWorkerUserDAO(WorkerUserDAO workerUserDAO) {
        this.workerUserDAO = workerUserDAO;
    }

    public WorkerUserDAO getWorkerUserDAO() {
        return workerUserDAO;
    }

    public boolean insertWorkerUser(WorkerUser workerUser) {
        if (workerUserDAO == null)
            throw new IllegalArgumentException("WorkerUserDAO is not set, you should have listened to the constructor");
        return workerUserDAO.insertWorkerUser(
                workerUser.getPersonalidentificationnumber(),
                workerUser.getId().getNickname(),
                workerUser.getId().getEmail(),
                workerUser.getStore().getLocation());
    }

    public boolean insertWorkerUser(String personalIdentificationNumber,
                                    String userNickname,
                                    String userMail,
                                    String location) {
        if (workerUserDAO == null)
            throw new IllegalArgumentException("WorkerUserDAO is not set, you should have listened to the constructor");
        return workerUserDAO.insertWorkerUser(personalIdentificationNumber, userNickname, userMail, location);
    }

    public boolean insertWorkerUsers(List<WorkerUser> workerUsers){
        if (workerUserDAO == null)
            throw new IllegalArgumentException("WorkerUserDAO is not set, you should have listened to the constructor");

        boolean result = true;
        for (WorkerUser workerUser : workerUsers) {
            boolean current = workerUserDAO.insertWorkerUser(
                    workerUser.getPersonalidentificationnumber(),
                    workerUser.getId().getNickname(),
                    workerUser.getId().getEmail(),
                    workerUser.getStore().getLocation());
            if (!current)
                System.out.println("Failed to insert worker user: " +
                                workerUser.getId().getNickname() + " " +
                                workerUser.getId().getEmail() + " " +
                                workerUser.getStore().getLocation());

            result = result && current;
        }

        return result;
    }
}

